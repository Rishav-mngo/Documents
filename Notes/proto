From the book "The Linux command line"

....................................................................................

"graphical user interfaces make easy tasks easy, while command line interfaces make difficult tasks possible"

SHELL 
>when we speak of the command line, we are really referring to the shell
>The shell is a program that takes keyboard commands and passed them to the operating system to carry out.
>All Linux distribution supply a shell called bash.

Terminal Emulators
> The terminal we see in OS is  a terminal emulator
> We need terminal emulator to interact with the shell.


[rishav@mngo~:$] <----This is called a shell prompt

> If the last character of the prompt is a hash mark ( # ) rather than a
dollar sign, the terminal session has superuser privileges.
> This means either we are logged in as the root user or we selected a terminal emulator that provides superuser (administrative) privileges.

> If we press the up arrow, we will see that the previous command entered,
This is called command history
> Most Linux distributions remember the last 1,000 commands by default

***MOUSE TRICK
If you highlight some text by holding down the left mouse button and dragging
the mouse over it (or double-clicking a word), it is copied into a buffer main-
tained by X. Pressing the middle mouse button will cause the text to be pasted
at the cursor location.

df --To see the current amount of free space on our disk drives.
free --to display the amount of free memory.

NAVIGATION
pwd --Print name of current working directory
cd --Change directory
ls --List directory contents

> Linux follow hierarchical directory structure like windows
> The first directory in the file system is called the root director.
> The root directory contains files and sub directories, which contain more files and sub directories, and so on.
> Note that unlike windows which has a separate file system tree for each storage device, UNIX like systems such as Linux always have a single file system tree,regardless of how may drives or storage devices are attached to the computer
> system administrator decide where the storage device added.

The current working directory
>Is the directory we are in currently.

Absolute path names
> An absolute path name begins either the root directory and follows the tree branch by branch until the path to the desired directory or file

> To navigate to root cd /
> To navigate to a bin folder in root cd /usr/bin

Relative path names
> where an absolute path name starts from the root directory and leads to its destination , a relative path name starts from the working directory.
> The . notation refers to the working directory, and the .. notation refers to the working directory's parent directory.

cd .. -- navigate to parent directory

cd ./bin -- same as /usr/bin in all most all cases we can omit ./ part just type 
cd bin



 IMPORTANT FACTS ABOUT FILENAMES
> filenames begin with period character are hidden. 
this means ls will not list them unless you say [ls -a]
>Linux has no concept of a file extension.
>filenames and commands are case sensitive

cd Changes the working directory to your home directory.
cd - Changes the working directory to the previous working directory.
cd ~user_name Changes the working directory to the home directory of user_name .
For example, typing cd ~bob will change the directory to the home
directory of user â€œbob.


EXPLORE THE SYSTEM
> As we know ls is use to list directory.we can also specify the directory to list
  [ls /usr]
> we can specify multiple directories 
  [ls ~ /usr] here we specify two directories user's home directories(~) and /usr .

> we can also change the format of the output to revel more detail.
[ls -l] adding -l to command we changed the format to the long format.

OPTIONS AND ARGUMENTS(how command works)
> commands are often followed by one or more options that modify their behavior and
  further, by one or more arguments,the items upon which the command acts.
  [command -options arguments]
> most commands use options, which consist of a single character preceded by a dash
 for example -l
>we will use ls [-lt --reverse] to short items in reverse order, here t is another options stands for short and --reverse is type of shorting.
> long options consisting of a word preceded by two dashes[--a]
> the ls command has large number of possible options,the most common are listed in table

OPTION 		LONG OPTION 		DESCRIPTION
-a		-all			list all files, even those with names that 						begin with a period, which are normally not 						listed (that is, hidden)

-A		--almost-all		Like the -a option except it does not 						list . (current directory) and .. (parent)


-d		--directory 		ordinarily, if a directory is specified, 
 					ls will list the contents of the directory, 						not the directory itself. 					

FIELDS
[-rw-rw-r--  1 rishav rishav   73 Apr 16 16:35  first.c]

 [-rw-r--r--]  Access right to the file. The first chapter indicates the type of file.among the different typed, a leading dash means a regular file,while a d indicates a directory . The next three characters are the access rights for the file's owner, the next three are for members of the file's group, and the final three are for everyone else.


[1] file's number of hard links.see "symbolic Links" 
the first rishav is the username of the file's owner and the second rishav is the name of the group that owns the file.
73 size of the file in bytes
Apr 16 16:35 date and time of last modification.
first.c name of the file with extension


DETERMINING A FILE'S TYPE WITH FILE

> [file first.c] the file command will print a brief description of the file's contents.

> one of the common ideas in UNIX like operating systems such as Linux is that "everything is a file" as we will see that how true that statement is.


VIEWING FILE CONTENTS WITH LESS
> the less command is a program to view text files. throughout our Linux system, there are many files that contain human readable text.the less program provides a convenient way to examine them.

> we are interested in the text file because many of the files that contain system setting(called conf file) are stored in this format, and being able to read them gives us insight about how the system works.

> some of the actual programs that the system uses (called script) are stored in this format.
[less filename]

WHAT IS TEXT?
text file is nothing but bunch of character stored to represent numbers.

[less /etc/passwd] once the less program starts, we can view the content of the file
press q to quit
press G to move to the end of the text file
1G or g to move to the beginning of the text file.
/characters search for the next occurrence of the previous search


[/] the root directory, where everything begins

[/bin] contains binaries(programs) that must be present for the system to boot and run

[/boot] contains the Linux kernel, initial ram disk image(for drivers needed at boot time), and the boot loader. Interesting files include /boot/grub/grub.cong, or menu.ist, which is used to configure the boot loader, and /boot/vmlinuz(or something similar). the Linux kernel

[/dev] this is a special directory that contain devices nodes. "every thing is a file" also applies to devices.here is where the kernel maintains a list of all the devised it understands.

[/etc] contains all the system-wide congfig files. it also contains a collection of shell scripts that start each of the system services at boot time.

[/home] in normal config, each user is given a directory in /home Ordinary users can writes files only in their home directories. thus limitation protects the system from errant user activity.

[/lib] contains shared library files used by the core system programs.these are somolar to dynamic link libraries(dlls) in windows.

[/lost+found] each formatted partion or device using linux file system, such as ext3, will have this directory. it is used in the case of a partial recovery from a file system corruption event. Unless something really bad has happened to your system, this directory will remain empty.

[/media] on modern linux systems, the /media directory will contain the mount points for removable media such a usb drives, cd-roms, and so on , that are mounted automatically ar insertion.

[/mnt] on older linux systems, the /mnt directory contains mount points for removable devices that have been mounted manually.

[/opt] the /opt directory is used to install "optional" software. This is mainly used to hold commercial software products that might be installed on the system.

[/proc] the /proc directory is special. it's not real file system in the sense of files stored on your hard drive.it is a virtual file system maintained by the linux kernel.the files are readable and will give you a picture of how the kernel sees your computer.

[/root] this is the home directory for the root account.

[/sbin] contains "system" binaries. these are programs that perform vital system tasks that are generally reserved for the superuser.

[/tmp] directory is intended for the storage of temporary, transient files created by various programs. some config caused this directory to be emptied each time the system is rebooted.

[/usr] directory tree is likely the largest one on a linux system. it contains all the programs and support files used by regular users.

[/usr/bin] contains the executable programs installed by your linux distribution.it is not uncommon for this directory to hold thousands of programs.

[/usr/lib] the shared libraries for the programs in /usr/bin.

[/usr/local] The /usr/local tree is where programs that are not included with your distribution but are intended for system-wide use are installed.Programs compiled from source code are normally installed in /usr/ocal/bin. On a newly installed Linux system, this tree exists, but it will be empty until the system administrator puts something in it.

[/usr/sbin] Contains more system administration programs.

[/usr/share] /usr/share contains all the shared data used by programs in /usr/bin.
This includes things such as default configuration files, icons,screen backgrounds, sound files, and so on.

[/usr/share/doc] Most packages installed on the system will include some kind of
documentation. In /usr/share/doc, we will find documentation files organized by package.

[/var] With the exception of /tmp and /home, the directories we have looked at so far remain relatively static; that is, their contents donâ€™t change. The /var directory tree is where data that is likely to change is stored. Various databases, spool files, user mail, and so forth, are located here.

[/var/log] /var/log contains log files, records of various system activity. These
are important and should be monitored from time to time. The most
useful ones are /var/log/messages and /var/log/syslog. Note that
for security reasons on some systems, you must be the superuser to
view log files.


SYMBOLIC LINKS
As we look around, we are likely too see a directory listing(for example,/lib) with an entry like this:

[lrwxrwxrwx 1 root root 11 2018-08-11 07:34 libc.so.6 -> libc-2.6.so]

> This is special kind of a file called a symbolic link(also known as a soft link or symlink).

> Unix-like system, it is possible to have a file referenced by multiple names.

> suppose we want a shared file which is used by many programs and the shared file is frequently changing the versions
so we create a link to navigate to current version if we change the file we only have to delete the link and create new
link to navigate to new file.

> Hard links also allow files to have multiple names, but they do it in a different way.


The most frequently used Linux commands used for manipulating both files and directories:

[cp] copy files and directories 
[mv] Move/rename files and directories
[mkdir] create directories
[rm] remove files and directories
[ln] Create hard and symbolic links

These work can also be done by graphical file manager 
but command line is very powerful and flexible.
for example how can you delete all HTML files from one directories to another 
    [cp -u *.html destination]

WILDCARDS
> also know as globbing allows you to select filenames based on patterns of characters.

*           matches any characters
?           matches any single character
[characters]matches any char that is a member of the set characters
[!charactes]matches any character that is not a member of the set characters.
[[:class:]] matches any character that is a member of the specified class.

[:alnum:] matches any alphanumeric character
[:alpha:] matches any alphabetic character.
[:digit:] matches any numeral
[:lower:] matches any lowercase letter
[:upper:] matches any uppercase letter

 
[cp file.doc newfile.doc] to make a copy of a file called file.cdoc in the current directory as newfile.doc

______________________.
$ ls                  | a.txt b.txt is copied to "new" directory
a.txt  b.txt  new     |
                      |
Initially new is empty|
$ ls new              |
                      |
$ cp a.txt b.txt new  |
                      |
$ ls new              |
______________________|
a.txt  b.txt

cp item1 item2 copied the single file or directory item1 to the file or directory item2. this command

cp item.... directory
copies multiple items (either files or directories) into a directory.

USEFUL OPTIONS
-a, --archive Copy the files and directories and all of their attributes, including ownerships and permissions.

-i, --interactive Before overwriting an existing file, prompt the user for confirmation. If this option is not specified,
cp will silently(meaning there will be no warning) overwrite files.

-r , --recursive Recursively copy directories and their contents. This option (or the -a option) is required when
copying directories.

-u , --update when copying files from one directory to another, only copy files that either don't exist or are newer
than the existing corresponding files in the destination directory. This is useful when copying large numbers of files
as it skips files that don't need to be copied.

-v , --verbose display information message as the copy is performed.

some command

cp file1 file2       -        copy file1 to file2.if file2 exists, it is overwritten with the contents of file1. if file2 does
not exist, it is created.


cp -i file1 file2              same as previous command , except that if file2 exists, the user is prompted before it is overwritten.



cp file1 file2 dir1                copy file1 and file2 into directory dir1. The directory dir1 must already exist.



cp dir1/* dir2            using a wildcard, copy all the files in dir1 into dir2. The directory dir2 must already exist.




cp -r dir1 dir2           copy the contents of directory dir1 to directory dir2. if directory dir2 does not exist, it is created
and after the copy, will contain the same contents as directory dir1. if directory dir2 does exist, then directory dir1
(and its contents ) will be copied into dir2.





move command

mv file1 file2

mv -i file1 file2              same as the previous command, except that if file2 exists, the user is prompted before it
is over written.

mv file1 file2 dir1            move file1 and file2 into directory dir1. the directory dir1 must already exits.


mv dir1 dir2              if directory dir2 does not exist, vreate directory dir2 and move the contents of directory
dir1 to dir2 and delete direcoty dir1. if directory dir2 does exist, move directory dir1 (and its contents) into
directory dir2.

rm---remove files and directories

the rm commands is used to remove (delete) files and directories, as shown here:

----------------------------------------------------------------------------
rm item....
----------------------------------------------------------------------------

where item is one or more files or directories.

rm file1    

rm -i file1 
 
rm -r file1 dir1 

rm -rf file1 dir1


ln ---create links

    The ln command is used to create either hard or symbolic links. It is used is one of two ways. 

The following creates a Hard link:
ln file link

The following creates a symbolic link:
ls -s item link

where item is either a file or a directory.

Hard Links
Hard links are the original Unix way of creating links, compared to symbolic links,

A hard link cannot reference a file outside its own file system. This means a link cannot reference a file that is not
on the same disk partition as the link itself.

A hard link may not reference a directory.

SYMBOLIC LINKS

When you delete a symbolic link , however only the link will continue to exist but will point to nothing. in this case ,
the link is said to be broken links in a distinguishing color, such as red, to reveal their presence.

Creating hard link

Remember that a file will always have at leas one link because the file's name is created by a link.

Files are made up of two parts 
the data part containing the file's contents
the name part that holds the file's name

When we create hard links, we are actually creating additional name parts that all refer to the same data part. 
The system assigns a chain of disk blocks to what is called an inode.

The ls command has a way to reveal this information. It is invoked with -i option.

from this option we can find inode number

CREATING SYMBOLIC LINKS

symbolic links were created to overcome the two disadvantage of hard links:

> Hard links cannot span physical devices.
> Hard links cannot reference directories, only files.

Symbolic links are special type of file that contains a text pointer to the target file or directory.

creating symbolic links is similar to creating hard links.

ls -s fun fun-sym

we add -s option to create symbolic link rather than hardlinks.

when we are creating a symbloic link , we are creating a text decription of where the target file is relative to the symbolic link.

the length of the symbolic link file is the number of characteres in the string rather than the length of the file to which it is pointing.


